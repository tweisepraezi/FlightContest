Live Tracking
=============

Team Management
---------------

-> Crews -> Import live tracking teams
    Existing teams will be identified by e-mail and not imported again.
    
    GET /api/v1/contests/{id}/teams/
        Get all teams of a contest with detailed team information


-> Crews -> Create and connect live tracking teams for selected crews
    Only for non-connected crews with e-mail.
    
    GET/POST /api/v1/teams/ 
        Gives access to the entire list of teams in the system. You can post to submit a new team, or search for an existing team. 
        Any post will return an existing team if it exists, or create a new one.
        Existing teams will be identified by * attributes.
            aeroplane*	
                registration*	string  *
                colour	        string
                type	        string

            crew*	    
                member1*
                    first_name*	string
                    last_name*	string
                    email*	    string  *
                member2
                    first_name*	string
                    last_name*	string
                    email*	    string  *
            club	    
                name*	        string  ?
                country	        string
            country	            string
    
    POST/PUT/DELETE /api/v1/contests/{id}/contestteams/
        Allows managing the team is assigned to a contest. You can post new team assignments, modify existing assignments, and delete assignments. 
        You need to include a reference both to the contest ID and the team ID inside the post data (even though the contest ID is also present in the path).
            air_speed	        number      The planned airspeed for the contestant
            tracking_service	string      Tracking service, Supported tracking services: (('traccar', 'Traccar'),)
            tracking_device	    string      Tracking device, The device used for tracking the team: pilot_app or copilot_app
            tracker_device_id	string      Tracker device id, ID of physical tracking device that will be brought into the plane. Leave empty if official Air Sports Live Tracking app is used. Note that only a single tracker is to be used per plane.
            contest*	        integer     Contest
            team*	            integer     Team

-> Crews -> Disconnect and delete live tracking teams for selected crews
    Only for connected crews.


Results Service
---------------

-> Task -> <Taskname> -> Create navigation task (additional calls)
    GET POST/PUT/DELETE /api/v1/contests/{id}/tasks/
        Fetches the list of tasks, or post/update a new task for a contest
            name*	                        string      Name
            heading*	                    string      Heading
            contest*	                    integer     Contest    
            autosum_scores	                boolean     Autosum scores, If true, the server sum all tests into TaskSummary when any test is updated
            summary_score_sorting_direction	string      Summary score sorting direction, desc or asc, Whether the lowest (ascending) or highest (ascending) score is the best result
            index	                        integer     Index, The index of the task when displayed as columns in a table. Indexes are sorted in ascending order to determine column order 
        
    PlanningTest, NavigationTest, ObservationTest, LandingTest, OtherTest -> POST /GET/PUT/DELETE /api/v1/contests/{id}/tasktests/ 
        Fetches the lists of tasks tests (there are many tests for a task), or post/update a new task test for the task (task ID provided in post data) and contest
            name*	        string      Name
            heading*	    string      Heading
            task*	        integer     Task
            navigation_task	integer     Navigation task
            sorting	        string      Sorting, desc or asc, Whether the lowest (ascending) or highest (ascending) score is the best result
            index	        integer     Index, The index of the task when displayed as columns in a table. Indexes are sorted in ascending order to determine column order
    
-> Results -> <Taskname> -> Update live tracking results
    FC.Task.Test.Detail -> PUT /api/v1/contests/{id}/update_test_result/ 
        Update the individual score for a test for a team. Requires reference to a task_test, this id to get from posting a new task test
            task_test*	integer     Task test
            points*	    number      Points
            team*	    integer     Team

    PUT /api/v1/contests/{id}/update_task_summary/ 
        Update the total score for a task for a team. Requires reference to a task, this id you get from posting a new task
            task*	integer     Task
            points*	number      Points
            team*	integer     Team

-> Evaluation -> Contest Evaluation -> Update live tracking results
    PUT /api/v1/contests/{id}/update_contest_summary/ 
        Update the total score for the contest for a team
            points*	number      Points
            team*	integer     Team
 

GET /api/v1/contests/{id}/teams/ -> Team-IDs ermitteln
    provides a list of all teams for the contest. 
    
GET /api/v1/contests/{id}/results_details/ 
    returns all data that is part of the results service for the contest
    

Publish Management
------------------

PUT /api/v1/contests/{id}/share/
    visibility*	    string      VisibilityEnum: public, private, unlisted

PUT /api/v1/contests/{contest_pk}/navigationtasks/{id}/share/ 
    visibility*	    string      VisibilityEnum: public, private, unlisted


Used APIs (simplified)
----------------------

https://airsports.no/docs/

call_rest("teams/",                      "POST", 201, json_builder.toString(), ALL_DATA)
call_rest("teams/{liveTrackingTeamID}/", "GET",  200, "", ALL_DATA)

call_rest("contests/",              "GET",    200, "", ALL_DATA)
call_rest("contests/",              "POST",   201, json_builder.toString(), "id")
call_rest("contests/{contest_pk}/", "DELETE", 204, "", "")

call_rest("contests/{contest_pk}/share/", "PUT", 200, json_builder.toString(), "")

call_rest("contests/{contest_pk}/teams/", "GET", 200, "", ALL_DATA)

call_rest("contests/{contest_pk}/contestteams/",                             "POST",   201, json_builder.toString(), ALL_DATA)
call_rest("contests/{contest_pk}/contestteams/{liveTrackingContestTeamID}/", "GET",    200, "", ALL_DATA)
call_rest("contests/{contest_pk}/contestteams/{liveTrackingContestTeamID}/", "DELETE", 204, "", "")

call_rest("contests/{contest_pk}/tasks/",           "GET",    200, "", ALL_DATA)
call_rest("contests/{contest_pk}/tasks/",           "POST",   201, json_builder.toString(), "id")
call_rest("contests/{contest_pk}/tasks/{task_id}/", "DELETE", 204, "", "")

call_rest("contests/{contest_pk}/tasktests/",                "GET",    200, "", ALL_DATA)
call_rest("contests/{contest_pk}/tasktests/{tasktest_id}/",  "DELETE", 204, "", "")
call_rest("contests/{contest_pk}/tasktests/",                "POST",   201, json_builder.toString(), "id")

call_rest("contests/{contest_pk}/navigationtasks/", "GET", 200, "", ALL_DATA)

call_rest("contests/{contest_pk}/navigationtasks/{navigationtask_pk}/", "GET", 200, "", ALL_DATA)
call_rest("contests/{contest_pk}/navigationtasks/{navigationtask_pk}/", "DELETE", 204, "", "")

call_rest("contests/{contest_pk}/navigationtasks/{navigationtask_pk}/share/", "PUT", 200, json_builder.toString(), "")

call_rest("contests/{contest_pk}/navigationtasks/{navigationtask_pk}/contestants/", "GET", 200, "", ALL_DATA)

call_rest("contests/{contest_pk}/navigationtasks/{navigationtask_pk}/contestantsteamid/", "POST", 201, json_builder.toString(), ALL_DATA)

call_rest("contests/{contest_pk}/navigationtasks/{navigationtask_pk}/contestants/{contestant_id}/update_without_team/", "PUT", 200, json_builder.toString(), "")

call_rest("contests/{contest_pk}/navigationtasks/{navigationtask_pk}/contestants/{contestant_id}/gpx_track/", "POST", 201, json_builder.toString(), "")

call_rest("contests/{contest_pk}/navigationtasks/{navigationtask_pk}/contestants/{contestant_id}/track/", "GET", 200, "", ALL_DATA)

call_rest("contests/{contest_pk}/importnavigationtaskteamid/", "POST", 201, json_builder.toString(), "id")

call_rest("contests/{contest_pk}/update_test_result/", "PUT", 200, json_builder.toString(), "")


call_rest function parameter (Java)
-----------------------------------
Map call_rest(String funcURL, String requestMethod, int successfulResponseCode, String jsonOutputData, String retDataKey)


Used APIs (original call)
-------------------------

Map ret3 = call_rest("contests/", "GET", 200, "", ALL_DATA)
Map ret1 = call_rest("contests/", "POST", 201, json_builder.toString(), "id")
Map ret1 = call_rest("contests/${contest_instance.liveTrackingContestID}/", "DELETE", 204, "", "")
Map ret1 = call_rest("contests/${contest_instance.liveTrackingContestID}/share/", "PUT", 200, json_builder.toString(), "")
Map ret1 = call_rest("contests/${contest_instance.liveTrackingContestID}/teams/", "GET", 200, "", ALL_DATA)
Map ret1 = call_rest("teams/", "POST", 201, team_json_builder.toString(), ALL_DATA)
	ret1 = call_rest("teams/", "POST", 201, team_json_builder.toString(), ALL_DATA)
Map ret2 = call_rest("contests/${contest_instance.liveTrackingContestID}/contestteams/", "POST", 201, contestteam_json_builder.toString(), ALL_DATA)
Map ret1 = call_rest("teams/${crew_instance.liveTrackingTeamID}/", "GET", 200, "", ALL_DATA)
Map ret2 = call_rest("contests/${contest_instance.liveTrackingContestID}/contestteams/${crew_instance.liveTrackingContestTeamID}/", "GET", 200, "", ALL_DATA)
Map ret1 = call_rest("contests/${contest_instance.liveTrackingContestID}/contestteams/${crew_instance.liveTrackingContestTeamID}/", "DELETE", 204, "", "")
Map ret3 = call_rest("contests/${contest_instance.liveTrackingContestID}/navigationtasks/", "GET", 200, "", ALL_DATA)
Map ret1 = call_rest("contests/${contest_instance.liveTrackingContestID}/importnavigationtaskteamid/", "POST", 201, json_builder.toString(), "id")
Map ret5 = call_rest("contests/${contest_instance.liveTrackingContestID}/tasktests/", "GET", 200, "", ALL_DATA)
Map ret3 = call_rest("contests/${contest_instance.liveTrackingContestID}/navigationtasks/", "GET", 200, "", ALL_DATA)
Map ret7 = call_rest("contests/${contest_instance.liveTrackingContestID}/navigationtasks/${navigationtask_id}/", "GET", 200, "", ALL_DATA)
Map ret5 = call_rest("contests/${contest_instance.liveTrackingContestID}/tasktests/", "GET", 200, "", ALL_DATA)
Map ret6 = call_rest("contests/${contest_instance.liveTrackingContestID}/tasktests/", "GET", 200, "", ALL_DATA)
Map ret5 = call_rest("contests/${contest_instance.liveTrackingContestID}/tasktests/", "GET", 200, "", ALL_DATA)
Map ret6 = call_rest("contests/${contest_instance.liveTrackingContestID}/tasktests/${tasktest.id}/", "DELETE", 204, "", "")
	ret5 = call_rest("contests/${contest_instance.liveTrackingContestID}/tasks/", "GET", 200, "", ALL_DATA)
Map ret6 = call_rest("contests/${contest_instance.liveTrackingContestID}/tasks/${task.id}/", "DELETE", 204, "", "")
Map ret1 = call_rest("contests/${contest_instance.liveTrackingContestID}/navigationtasks/${task_instance.liveTrackingNavigationTaskID}/", "DELETE", 204, "", "")
Map ret1 = call_rest("contests/${contest_instance.liveTrackingContestID}/tasks/", "POST", 201, json_builder_createtask.toString(), "id")
Map ret2 = call_rest("contests/${contest_instance.liveTrackingContestID}/tasks/", "GET", 200, "", ALL_DATA)
Map ret1 = call_rest("contests/${contest_instance.liveTrackingContestID}/tasks/", "GET", 200, "", ALL_DATA)
Map ret6 = call_rest("contests/${contest_instance.liveTrackingContestID}/tasks/${task.id}/", "DELETE", 204, "", "")
Map ret6 = call_rest("contests/${contest_instance.liveTrackingContestID}/tasktests/", "POST", 201, json_builder_tasktest.toString(), "id")
Map ret7 = call_rest("contests/${contest_instance.liveTrackingContestID}/tasktests/", "GET", 200, "", ALL_DATA)
Map ret6 = call_rest("contests/${contest_instance.liveTrackingContestID}/tasktests/${tasktest_id}/", "DELETE", 204, "", "")
Map ret1 = call_rest("contests/${contest_instance.liveTrackingContestID}/navigationtasks/${task_instance.liveTrackingNavigationTaskID}/share/", "PUT", 200, json_builder.toString(), "")
Map ret1 = call_rest("contests/${contest_instance.liveTrackingContestID}/navigationtasks/${task_instance.liveTrackingNavigationTaskID}/contestants/", "GET", 200, "", ALL_DATA)
Map ret1 = call_rest("contests/${contest_instance.liveTrackingContestID}/navigationtasks/${task_instance.liveTrackingNavigationTaskID}/contestants/", "GET", 200, "", ALL_DATA)
Map ret2 = call_rest("contests/${contest_instance.liveTrackingContestID}/navigationtasks/${task_instance.liveTrackingNavigationTaskID}/contestantsteamid/", "POST", 201, json_builder.toString(), ALL_DATA)
Map ret2 = call_rest("contests/${contest_instance.liveTrackingContestID}/navigationtasks/${task_instance.liveTrackingNavigationTaskID}/contestants/${contestant_id}/update_without_team/", "PUT", 200, json_builder.toString(), "")
Map ret1 = call_rest("contests/${contest_instance.liveTrackingContestID}/navigationtasks/${task_instance.liveTrackingNavigationTaskID}/contestants/", "GET", 200, "", ALL_DATA)
Map ret2 = call_rest("contests/${contest_instance.liveTrackingContestID}/navigationtasks/${task_instance.liveTrackingNavigationTaskID}/contestants/${contestant_id}/gpx_track/", "POST", 201, json_builder.toString(), "")
Map ret1 = call_rest("contests/${contest_instance.liveTrackingContestID}/navigationtasks/${task_instance.liveTrackingNavigationTaskID}/contestants/", "GET", 200, "", ALL_DATA)
Map ret2 = call_rest("contests/${contest_instance.liveTrackingContestID}/navigationtasks/${task_instance.liveTrackingNavigationTaskID}/contestants/${contestant_id}/track/", "GET", 200, "", ALL_DATA)
Map ret5 = call_rest("contests/${contest_instance.liveTrackingContestID}/update_test_result/", "PUT", 200, json_builder_result.toString(), "")


